/**
 * Set up KTLint and Android Lint to perform extensive code analysis.
 *
 * Gradle tasks added:
 * - ktlint
 * - testOnCi - runs unit tests with coverage report via JaCoCo
 * - lintOnCi - runs android lint and ktlint tools
 *
 * Java testing tools, such as pmd, findbugs, checkstyle are omitted intentionally because we are targeting to migrate whole project to kotlin
 *
 * The tasks above are added as dependencies of the 'check' task so running check will
 * run all of them.*/
// for CI we check unit tests with coverage
task testOnCi(dependsOn: ['testProductionDebugUnitTestCoverage'])

task lintOnCi(dependsOn: ['lintProductionRelease', 'ktlint'])

// Ktlint configuration
configurations {
  ktlint
}

dependencies {
  ktlint "com.pinterest:ktlint:0.35.0"
  // additional 3rd party ruleset(s) can be specified here
  // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and
  // ktlint will pick them up
}

task ktlint(type: JavaExec, group: "verification") {
  description = "Check Kotlin code style."
  classpath = configurations.ktlint
  main = "com.pinterest.ktlint.Main"
  args "src/**/*.kt",
      "--reporter=plain",
      "--reporter=checkstyle,output=${buildDir}/reports/ktlint.xml",
      "--verbose",
      "--android"
  // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
  description = "Fix Kotlin code style deviations."
  classpath = configurations.ktlint
  main = "com.pinterest.ktlint.Main"
  args "-F",
      "src/**/*.kt",
      "--android"
}